services:
  # --- Nginx 反向代理服务 ---
  reverse-proxy:
    build:
      context: ./reverse_proxy  # 指定 Dockerfile 所在目录
    restart: always
    ports:
      - "8080:8080"      # 将服务器的 80 端口映射到容器的 80 端口
      # - "443:443"    # 为未来的 HTTPS 预留 443 端口
    depends_on:      # 确保在后端服务启动后再启动 Nginx
      - diary_service
      # - todo_service
      # - media_service
      # - ai_service
    
    networks:
      - app-network


  diary_service:
    image: diary_service:v1
    build: 
      context: ./backend_services/diary_service
      dockerfile: Dockerfile.web
    env_file:
      - .env.compose
    # 不再需要 ports 映射，因为 Nginx 会处理所有外部流量
    # ports:
    #   - "8002:8002"
    depends_on:
      db_service:
        condition: service_healthy
    networks:
      - app-network

  db_service:
    image: bitnami/postgresql:latest
    restart: always
    environment:
      - POSTGRES_USER=user_test
      - POSTGRES_PASSWORD=pw_test
      - POSTGRES_DB=MyPostgresql
    # 数据库端口也不需要对公网暴露，除非你有外部工具需要直连
    # ports:
    #   - "5432:5432"
    # expose:
    #   - 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # 给 db_service 添加了一个健康检查。每隔10秒运行 pg_isready 命令来检查 PostgreSQL 是否准备好接受连接
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_test -d MyPostgresql"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

# 定义一个统一的网络，让所有服务都在其中
networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
